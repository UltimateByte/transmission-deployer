#!/bin/bash
# Multiple transmission-daemon deployer
# Authors: UltimateByte
# Website: https://www.terageek.org
# Description: Creates new users and duplicates transmission-daemon for them
# Version: 0.1

### SETTINGS ##
# Home directory for users (usually /home)
homedir="/home"
# Seedboxes directory: a subdirectory containing seedbox users
# Start with a / since it's a subdir
# Strip it if you don't wish to install in a dir
sbdir="/seedboxes"
# Default shell defined with usermod -s (usually /bin/bash)
usershell="/bin/bash"
# Optional: Bind listening IP
ip="0.0.0.0"
# Permissions on user dir
chmodvalue="775"
# Umask
# Default 2 leads to chmod 775 files (rwx rwx r-x)
# Umask 7 leads to chmod 770 files (rwx rwx ---)
umask="2"

#############
## Program ##
#############

## Misc Variables ##
selfname="$(basename "$(readlink -f "${BASH_SOURCE[0]}")")"

fn_usage(){
	echo "Info! Please, specify a command and a username"
	echo "Usage: ./${selfname} [command] [username]"
	echo "Available commands: deploy; clean"
}

# Check user input
# If nothing has been inputted
if [ -z "$1" ] || [ -z "$2" ]; then
	# Info about script usage
	fn_usage
	exit 0
# If there is too much args
elif [ -n "$3" ]; then
	echo "[ERROR] Too many arguments!"
	# Info about script usage
	fn_usage
	exit 1
else
	username="${2}"
fi
# Set command to something relevant
if [ "$1" == "deploy" ]; then
	command="deploy"
elif [ "$1" == "clean" ]; then
	command="clean"
# And exit on invalid command
else
	echo "[ERROR] Invalid command!"
	# Info about script usage
	fn_usage
	exit 1
fi

# Check that the script is launched with elevated privileges
fn_check_root(){
	if [ "$(id -u)" != "0" ]; then
		echo "[ERROR] This script must be run with elevated privileges"
		exit 1
	fi
}

## Variables ###
# MISC
# Transmission service name
tservice="debian-transmission"
# Transmission package name
deftransmission="transmission-daemon"
# Config file
cfgfile="settings.json"
# System directories
bindir="/usr/bin"
initdir="/etc/init.d"
libdir="/var/lib"
etcdir="/etc"
defdir="${etcdir}/default"
# Default transmission process full path
tdefprocesspath="${initdir}/${deftransmission}"
# Default transmission configdir
tdefcfgdir="${libdir}/${deftransmission}/info"

# User config
# Seedboxes directories in home
sbdirectories="${homedir}${sbdir}"
# User home directory
userdir="${sbdirectories}/${username}"
# User download directory
downloadsdir="${userdir}/downloads"
# User incomplete directory
incompletedir="${userdir}/incomplete"
# User's transmission process name
tuprocess="${deftransmission}-${username}"
# User config file full patch
tuconfig="${etcdir}/${tuprocess}/${cfgfile}"
# User default config file
utlibconfig="${libdir}/${tuprocess}/info/${cfgfile}"
# User defdir
udefdir="${defdir}/${tuprocess}"
# User transmission configdir
ucfgdir="${libdir}/${tuprocess}/info"
# User transmission program
tuprocesspath="${initdir}/${tuprocess}"

fn_prompt_continue_y(){
	while true; do
		read -e -i "y" -p "Continue? [Y/n]" yn
		case $yn in
			[Yy]* ) echo "Let's go!"; sleep 1; break;;
			[Nn]* ) echo "Aborting!"; exit 0;;
		* ) echo "Please answer yes or no.";;
		esac
	done
	echo ""
}

fn_sorry_exit(){
	echo "This setup can't go further, sorry!"
	echo "Exiting..."
	exit 1
}

# Welcome
	fn_welcome(){
	echo ""
	echo "Transmission server deployment"
	echo "########################################################"
	echo "Welcome!"
	echo ""
	echo "Please, take a moment to review your settings."
	echo "You're using this script as root. Be extra careful."
	echo ""
	echo "You chose to ${command} transmission-daemon for ${username}"
	sleep 2
	echo ""
}

# Checks that everything is allright before starting
fn_check(){
	echo ""
	echo "Checking your configuration..."
	sleep 1
	echo ""
	# Checking if transmission-daemon is installed
	if [ -f "${tdefprocesspath}" ]; then
		echo "[ ok ] transmission-daemon installed"
	else
		echo "[ERROR] ${deftransmission} doesn't seem to be installed"
		echo "Please, install ${deftransmission} and re-run ./${selfname} ${command} ${username}"
		fn_sorry_exit
	fi
	# Checking required files and directories
	# Homedir
	if [ -d "${homedir}" ]; then
		echo "[ ok ] Directory ${homedir} found"
	else
		echo "[ERROR] Could not find directory ${homedir}"
		echo "Please, set a valid homedir value"
		fn_sorry_exit
	fi
	# Main program : /usr/bin/transmission-daemon
	if [ -f "${bindir}/${deftransmission}" ]; then
		echo "[ ok ] File ${bindir}/${deftransmission} found"
	else
		echo "[ERROR] could not find file ${bindir}/${deftransmission}"
		fn_sorry_exit
	fi
	# File /etc/init.d/transmission-daemon
	if [ -f "${initdir}/${deftransmission}" ]; then
		echo "[ ok ] File ${initdir}/${deftransmission} found"
	else
		echo "[ERROR] could not find file  ${initdir}/${deftransmission}"
		fn_sorry_exit
	fi
	# File /etc//default/transmission-daemon
	if [ -f "${defdir}/${deftransmission}" ]; then
		echo "[ ok ] File ${defdir}/${deftransmission} found"
	else
		echo "[ERROR] could not find file ${defdir}/${deftransmission}"
		fn_sorry_exit
	fi
	# Directory /var/lib/transmission-daemon
	if [ -d "${libdir}/${deftransmission}" ]; then
		echo "[ ok ] Directory ${libdir}/${deftransmission} found"
	else
		echo "[ERROR] could not find directory ${libdir}/${deftransmission}"
		fn_sorry_exit
	fi
	# Directory /etc/transmission-daemon
	if [ -d "${etcdir}/${deftransmission}" ]; then
		echo "[ ok ] Directory ${etcdir}/${deftransmission} found"
	else
		echo "[ERROR] could not find directory ${etcdir}/${deftransmission}"
		fn_sorry_exit
	fi
}

fn_stop_transmission(){
	# Stopping transmission
	if [ -f "${tdefprocesspath}" ]; then
		echo "Stopping ${deftransmission} in order to continue the process"
		"${tdefprocesspath}" stop
		deftransmissionstopped="1"
	else
		deftransmissionstopped="0"
	fi
	if [ -f "${tuprocesspath}" ]; then
		echo "Stopping ${tuprocess} in order to continue the process"
		"${tuprocesspath}" stop
	fi
	echo ""
}

fn_check_previously_installed(){
	if [ -f "${tuprocesspath}" ]; then
		echo "[WARNING] ${tuprocess} is already installed!"
		echo "Do you wish to autoclean the old transmission from ${username} ?"
		echo "Info! This will remove any torrent and transmission settings."
		while true; do
			read -e -p "Continue? [y/n]" yn
			case $yn in
				[Yy]* ) echo "Cleaning!"; cleanoldtransmission="yes"; break;;
				[Nn]* ) echo "Aborting!"; cleanoldtransmission="no", break;;
			* ) echo "Please answer yes or no.";;
			esac
		done
		echo ""
		if [ "${cleanoldtransmission}" == "yes" ]; then
			echo "Removing user ${username} from group ${tservice}..."
			deluser ${username} ${tservice}
			echo "[ ok ] User is not a part of ${tservice} anymore!"
			echo ""
			echo "Removing ${tuprocess} files..."
			rm -R "${bindir:?}/${tuprocess:?}" "${initdir:?}/${tuprocess:?}" "${libdir:?}/${tuprocess:?}" "${etcdir:?}/${tuprocess:?}" "${defdir:?}/${tuprocess:?}"
			echo "[ ok ] files removed!"
			echo "Removing ${tuprocess} from rc.d..."
			update-rc.d "${tuprocess}" remove
			echo "[ ok ] Process cleared from rc.d!"
			echo ""
			echo "[ ok ] Previous installation cleaned!"
			echo ""
		fi
	fi
}

# Check if user exists, returns userexists=0/1
fn_check_user_exists(){
	if [ "$(grep "${username}" /etc/passwd)" ]; then
		userexists="1"
	else
		userexists="0"
	fi	
}

# Prompts for removing an existing user
fn_remove_user(){
	if [ "${userexists}" == "1" ]; then
		if [ -d "${userdir}" ]; then
			echo "Info! ${username} already exists"
			echo "Do you wish to remove the user and its home directory ?"
			echo "[WARNING] Any file in ${userdir} will be lost!"
			while true; do
				read -e -p "Continue? [y/n]" yn
				case $yn in
					[Yy]* ) echo "Let's go!"; cleanuser="yes"; break;;
					[Nn]* ) echo "Aborting!"; cleanuser="no", break;;
				* ) echo "Please answer yes or no.";;
				esac
			done
			echo ""
			if [ "${cleanuser}" == "yes" ]; then
				echo "Closing ${username} processes"
				echo "Info! Press ctrl + c to abort !"
				sleep 2
				killall -KILL -u "${username}"
				echo "[ ok ] Closed processes"
				echo ""
				echo "Removing user: ${username} and its home: ${userdir}"
				echo "Info! Press ctrl + c to abort !"
				sleep 1; echo "5"
				sleep 1; echo "4"
				sleep 1; echo "3"
				sleep 1; echo "2"
				sleep 1; echo "1"
				sleep 1; echo "removing ${username}"
				userdel -r "${username}"
				echo "[ ok ] Removed previous ${username} and its home directory"
			fi
		fi
	fi
}

fn_create_user(){
	if [ "${userexists}" == 1 ]; then
		fn_remove_user
	fi
	if [ "${userexists}" == "0" ]||[ "${cleanuser}" == "1" ]; then
		echo "Info! ${username} doesn't exist"
		echo "Home direcotry for this user set to dir: ${userdir}"
		echo "Create new transmission server for user: ${username} ?"
		fn_prompt_continue_y
		# Adding user
		if [ ! -d ${sbdirectories} ]; then
			echo "creating ${sbdirectories}..."
			mkdir -p "${sbdirectories}"
		fi
		echo "Creating ${username}...."
		useradd -m -d "${userdir}" "${username}"
		echo "Default shell ${usershell} for ${username}"
		usermod -s "${usershell}" "${username}"
		# Doc http://askubuntu.com/questions/221081/permission-denied-when-downloading-with-transmission-deamon
		echo "Adding user ${username} to group ${tservice}..."
		echo "Info! It fixes permission issues but allows this user to access other files from the group and reciprocally"
		usermod -a -G "${tservice}" "${username}"
		echo "[ ok ] User created"
		echo "Please, choose a password for ${username}:"
		passwd "${username}"
	fi
}

fn_user_dirs(){
	echo "Creating user's directories..."
	sleep 1
	echo "${downloadsdir} && ${incompletedir}"
	if [ ! -d "${downloadsdir}" ]; then
		mkdir -p "${downloadsdir}"
	fi
	if [ ! -d "${incompletedir}" ]; then
		mkdir -p "${incompletedir}"
	fi
	echo "[ ok ] Directories created!"
	echo ""
	echo "Applying permissions..."
	echo "[ ok ] Proper permissions applied!"
	sleep 1
	chown "${username}":"${tservice}" "${userdir}"
	chown -R "${username}":"${tservice}" "${downloadsdir}" "${incompletedir}"
	chmod 775 "${sbdirectories}"
	chmod -R ${chmodvalue} "${userdir}"
}

### Dev notes
# https://fr.scribd.com/doc/242365178/How-to-Run-Multiple-Instances-of-Transmission-Daemon-in-Linux-Debian-or-Ubuntu
# cp /usr/bin/transmission-daemon /usr/bin/transmission-daemon2 
# cp /etc/init.d/transmission-daemon /etc/init.d/transmission-daemon2 
# cp -a /var/lib/transmission-daemon /var/lib/transmission-daemon2 
# cp -a /etc/transmission-daemon /etc/transmission-daemon2 
# cp /etc/default/transmission-daemon /etc/default/transmission-daemon2 
# chmod –R 777 /usr/bin/transmission-daemon2 
# chmod –R 777 /etc/init.d/transmission-daemon2 
# chmod –R 777 /var/lib/transmission-daemon2 
# chmod –R 777 /etc/transmission-daemon2
# chmod –R 777 /etc/default/transmission-daemon2

fn_transmission_duplicate(){
	echo ""
	echo "Duplicating ${deftransmission} to ${tuprocess}..."
	cp "${bindir}/${deftransmission}" "${bindir}/${tuprocess}"
	cp "${initdir}/${deftransmission}" "${initdir}/${tuprocess}"
	cp -a "${libdir}/${deftransmission}" "${libdir}/${tuprocess}"
	cp -a "${etcdir}/${deftransmission}" "${etcdir}/${tuprocess}"
	cp "${defdir}/${deftransmission}" "${defdir}/${tuprocess}"
	# A little check
	if [ ! -d "${etcdir}/${tuprocess}" ]; then
		echo "[ERROR] ${etcdir}/${tuprocess} was not created"
		fn_sorry_exit
	fi
	echo "[ ok ] ${tuprocess} duplicated!"
}

# Generate config file
fn_create_config(){
	echo ""
	echo "Info! Please, set the transmission RPC password"
	echo "Warning! No confirmation, not hidden"
	echo "RPC password:"
	read -r rpcpasswd
	echo "Please, set an RPC port (default 9091)"
	echo "RPC port:"
	read -r trpcport
	echo ""
	echo "Creating config file..."
	if [ ! -d "${etcdir}/${tuprocess}" ]; then
		fn_sorry_exit
	fi
	# Check if config file exists, inform if it doesn't since it's not normal
	if [ ! -f "${tuconfig}" ]; then
		echo "Info! No config file was found in ${etcdir}/${tuprocess}"
		echo "Don't worry, this setup will build it from scratch anyways"
		touch "${tuconfig}"
	fi
	# Write to actual config file
	echo "{
	\"alt-speed-down\": 50,
	\"alt-speed-enabled\": false,
	\"alt-speed-time-begin\": 540,
	\"alt-speed-time-day\": 127,
	\"alt-speed-time-enabled\": false,
	\"alt-speed-time-end\": 1020,
	\"alt-speed-up\": 50,
	\"bind-address-ipv4\": \"${ip}\",
	\"bind-address-ipv6\": \"::\",
	\"blocklist-enabled\": false,
	\"blocklist-url\": \"http://www.example.com/blocklist\",
	\"cache-size-mb\": 4,
	\"dht-enabled\": true,
	\"download-dir\": \"${downloadsdir}\",
	\"download-limit\": 100,
	\"download-limit-enabled\": 0,
	\"download-queue-enabled\": true,
	\"download-queue-size\": 5,
	\"encryption\": 1,
	\"idle-seeding-limit\": 30,
	\"idle-seeding-limit-enabled\": false,
	\"incomplete-dir\": \"${incompletedir}\",
	\"incomplete-dir-enabled\": true,
	\"lpd-enabled\": false,
	\"max-peers-global\": 200,
	\"message-level\": 1,
	\"peer-congestion-algorithm\": \"\",
	\"peer-id-ttl-hours\": 6,
	\"peer-limit-global\": 200,
	\"peer-limit-per-torrent\": 50,
	\"peer-port\": 51413,
	\"peer-port-random-high\": 65535,
	\"peer-port-random-low\": 49152,
	\"peer-port-random-on-start\": true,
	\"peer-socket-tos\": \"default\",
	\"pex-enabled\": true,
	\"port-forwarding-enabled\": false,
	\"preallocation\": 1,
	\"prefetch-enabled\": 1,
	\"queue-stalled-enabled\": true,
	\"queue-stalled-minutes\": 30,
	\"ratio-limit\": 2,
	\"ratio-limit-enabled\": false,
	\"rename-partial-files\": true,
	\"rpc-authentication-required\": true,
	\"rpc-bind-address\": \"${ip}\",
	\"rpc-enabled\": true,
	\"rpc-password\": \"${rpcpasswd}\",
	\"rpc-port\": ${trpcport},
	\"rpc-url\": \"/transmission/\",
	\"rpc-username\": \"${username}\",
	\"rpc-whitelist\": \"127.0.0.1\",
	\"rpc-whitelist-enabled\": false,
	\"scrape-paused-torrents-enabled\": true,
	\"script-torrent-done-enabled\": false,
	\"script-torrent-done-filename\": \"\",
	\"seed-queue-enabled\": false,
	\"seed-queue-size\": 10,
	\"speed-limit-down\": 12000,
	\"speed-limit-down-enabled\": false,
	\"speed-limit-up\": 500,
	\"speed-limit-up-enabled\": false,
	\"start-added-torrents\": true,
	\"trash-original-torrent-files\": false,
	\"umask\": ${umask},
	\"upload-limit\": 100,
	\"upload-limit-enabled\": 0,
	\"upload-slots-per-torrent\": 50,
	\"utp-enabled\": true
	}" > "${tuconfig}"

	echo "Symlinking config file"
	ln -vsf "${tuconfig}" "${utlibconfig}"
}

fn_config_extra(){
echo "Adjusting ${initdir}/${tuprocess} to fit user..."
# Replace default transmission process name ocurrences by user transmission process name
sed -i "s/${deftransmission}/${tuprocess}/g" "${initdir}/${tuprocess}"
echo "[ ok ] New process now fits user!"
# Replace CONFIG_DIR="/var/lib/transmission-daemon/info" in File: /etc/default/transmission-daemon-downloader
echo "Updating config location info"
sed -i "s@${tdefcfgdir}@${ucfgdir}@g" "${udefdir}"
echo "[ ok ] Config location info updated!"
echo ""

# Process upon system boot
echo "Allowing ${tuprocess} to run on boot"
update-rc.d "${tuprocess}" defaults
echo "[ ok ] update-rc.d applied!"
}

fn_start_back(){
	if [  "${deftransmissionstopped}" == "1" ]; then
		echo "Starting back ${deftransmission}"
		"${tdefprocesspath}" start
	fi
}

fn_setup_complete(){
	echo ""
	echo "Transmission server Deployment"
	echo "########################################################"
	echo "Installation complete!"
	echo "You can now try to run the daemon with:"
	echo "${initdir}/${tuprocess} start"
	echo ""
	echo "Info:"
	echo "Username: ${username}"
	echo "RPC Port: ${trpcport}"
	echo "RPC Password: ${rpcpasswd}"
	echo "RPC URL: /transmission"
	echo ""
	echo "Credits: UltimateByte"
}

fn_clean_complete(){
	echo ""
	echo "Transmission server cleaning"
	echo "########################################################"
	echo "Cleaning complete!"
	echo ""
	echo "Credits: UltimateByte"
}

fn_check_root
fn_check
fn_welcome
fn_prompt_continue_y
fn_stop_transmission
if [ "${command}" == "deploy" ]; then
	fn_check_previously_installed
	fn_check_user_exists
	fn_create_user
	fn_user_dirs
	fn_transmission_duplicate
	fn_create_config
	fn_config_extra
	fn_start_back
	fn_setup_complete
elif [ "${command}" == "clean" ]; then
	fn_check_previously_installed
	fn_check_user_exists
	fn_remove_user
	fn_start_back
	fn_clean_complete
fi
