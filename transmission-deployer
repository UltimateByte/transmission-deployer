#!/bin/bash
# Multiple transmission-daemon deployer
# Authors: UltimateByte
# Website: https://www.terageek.org
# Description: Creates new users and duplicates transmission-daemon for them
# Version: 0.9b

### SETTINGS ###

## Directories
# Seedbox directories will be /homedir/sbdir/username
# note that you can empty sbdir variable to have a /homedir/username structure

# Home directory for users
homedir="/home"
# (optional) Seedboxes directory
sbdir="/seedboxes" # Start with a / since it's a subdir or strip it if unused

## Permissions

# Default shell defined with usermod -s (usually /bin/bash)
usershell="/bin/bash"
# Permissions on user dir
chmodvalue="775"
# Umask
# Umask 2 leads to chmod 775 files (rwx rwx r-x)
# Umask 7 leads to chmod 770 files (rwx rwx ---)
umask="2"

## Extra configuration 

# Apache2 alias /apachealias/username (start with /)
apachealias="/dl"

#############
## Program ##
#############

# Check that the script is launched with elevated privileges
if [ "$(id -u)" != "0" ]; then
	fn_echo "[ERROR] This script must be run with elevated privileges"
	exit 1
fi

## Misc Variables ##
selfname="$(basename "$(readlink -f "${BASH_SOURCE[0]}")")"

# Download bash API
if [ ! -f "ultimate-bash-api.sh" ]; then
	wget https://raw.githubusercontent.com/UltimateByte/ultimate-bash-api/master/ultimate-bash-api.sh
	chmod +x ultimate-bash-api.sh
fi
# shellcheck disable=SC1091
source ultimate-bash-api.sh

fn_usage(){
	fn_echo "Info! Please, specify a command and a username"
	fn_echo "Usage: ./${selfname} [command] [username]"
	fn_echo "Available commands:"
	fn_echo " * ./${selfname} deploy [username] - Deploy a new seedbox"
	fn_echo " * ./${selfname} remove [username] - Remove an existing seedbox"
	fn_echo " * ./${selfname} details [username] - Get details about an existing install"
	fn_echo " * ./${selfname} details all - Get details about all installed seedboxes"
	fn_echo " * ./${selfname} start/stop/restart [username] - Start/stop/restart transmission instance"
	fn_echo " * ./${selfname} start/stop/restart all - Start/stop/restart transmission instance"
}

# Check user input
# If nothing has been inputted
if [ -z "$1" ] || [ -z "$2" ]; then
	# Info about script usage
	fn_usage
	exit 0
# If there is too much args
elif [ -n "$3" ]; then
	fn_echo "[ERROR] Too many arguments!"
	# Info about script usage
	fn_usage
	exit 1
else
	username="${2}"
fi
# Set command to something relevant
if [ "$1" == "deploy" ]; then
	command="deploy"
elif [ "$1" == "remove" ]; then
	command="remove"
elif [ "$1" == details ]; then
	command="details"
elif [ "$1" == "start" ]; then
	command="start"
elif [ "$1" == "stop" ]; then
	command="stop"
elif [ "$1" == "restart" ]; then
	command="restart"
# And exit on invalid command
else
	fn_echo "[ERROR] Invalid command!"
	# Info about script usage
	fn_usage
	exit 1
fi

## Variables ###
# MISC
# Transmission service name
tservice="debian-transmission"
# Transmission package name
deftransmission="transmission-daemon"
# Config file
cfgfile="settings.json"
# System directories
bindir="/usr/bin"
initdir="/etc/init.d"
libdir="/var/lib"
etcdir="/etc"
defdir="${etcdir}/default"
# Default transmission process full path
tdefprocesspath="${initdir}/${deftransmission}"
# Default transmission configdir
tdefcfgdir="${libdir}/${deftransmission}/info"

# User config
# Seedboxes directories in home
sbdirectories="${homedir}${sbdir}"
# User home directory
userdir="${sbdirectories}/${username}"
# User download directory
downloadsdir="${userdir}/downloads"
# User incomplete directory
incompletedir="${userdir}/incomplete"
# User's transmission process name
tuprocess="${deftransmission}-${username}"
# User config file full patch
tuconfig="${etcdir}/${tuprocess}/${cfgfile}"
# User default config file
utlibconfig="${libdir}/${tuprocess}/info/${cfgfile}"
# User defdir
udefdir="${defdir}/${tuprocess}"
# User transmission configdir
ucfgdir="${libdir}/${tuprocess}/info"
# User transmission program
tuprocesspath="${initdir}/${tuprocess}"

fn_refresh_tuprocess(){
	username="${selectedseedbox}"
	tuprocess="${deftransmission}-${username}"
	# User config file full patch
	tuconfig="${etcdir}/${tuprocess}/${cfgfile}"
	# User default config file
	utlibconfig="${libdir}/${tuprocess}/info/${cfgfile}"
	# User defdir
	udefdir="${defdir}/${tuprocess}"
	# User transmission configdir
	ucfgdir="${libdir}/${tuprocess}/info"
	# User transmission program
	tuprocesspath="${initdir}/${tuprocess}"
}

# Prompt with Yes preselected
fn_prompt_continue_y(){
	while true; do
		read -e -i "y" -p "Continue? [Y/n]" yn
		case $yn in
			[Yy]* ) echo "Let's go!"; sleep 1; break;;
			[Nn]* ) echo "Aborting!"; exit 0;;
		* ) echo "Please answer yes or no.";;
		esac
	done
}

# Displays an exit message
fn_sorry_exit(){
	fn_logecho "This setup can't go further, sorry!"
	fn_logecho "Exiting..."
	exit 1
}

# Displays a welcome message
fn_welcome(){
	fn_echo "Transmission server manager"
	fn_echo "########################################################"
	fn_logecho "You chose to ${command} transmission-daemon for ${username}"
	sleep 1
}

# Checks that everything is allright before starting
fn_check(){
	fn_logecho "Checking your configuration..."
	sleep 1
	# Checking if transmission-daemon is installed
	if [ -f "${tdefprocesspath}" ]; then
		fn_logecho "[ ok ] transmission-daemon installed"
	else
		fn_logecho "[ERROR] ${deftransmission} doesn't seem to be installed"
		fn_logecho "Please, install ${deftransmission} and re-run ./${selfname} ${command} ${username}"
		fn_sorry_exit
	fi
	# Checking required files and directories
	# Homedir
	if [ -d "${homedir}" ]; then
		fn_logecho "[ ok ] Directory ${homedir} found"
	else
		fn_logecho "[ERROR] Could not find directory ${homedir}"
		fn_logecho "Please, set a valid homedir value"
		fn_sorry_exit
	fi
	# Main program : /usr/bin/transmission-daemon
	if [ -f "${bindir}/${deftransmission}" ]; then
		fn_logecho "[ ok ] File ${bindir}/${deftransmission} found"
	else
		fn_logecho "[ERROR] could not find file ${bindir}/${deftransmission}"
		fn_sorry_exit
	fi
	# File /etc/init.d/transmission-daemon
	if [ -f "${initdir}/${deftransmission}" ]; then
		fn_logecho "[ ok ] File ${initdir}/${deftransmission} found"
	else
		fn_logecho "[ERROR] could not find file  ${initdir}/${deftransmission}"
		fn_sorry_exit
	fi
	# File /etc//default/transmission-daemon
	if [ -f "${defdir}/${deftransmission}" ]; then
		fn_logecho "[ ok ] File ${defdir}/${deftransmission} found"
	else
		fn_logecho "[ERROR] could not find file ${defdir}/${deftransmission}"
		fn_sorry_exit
	fi
	# Directory /var/lib/transmission-daemon
	if [ -d "${libdir}/${deftransmission}" ]; then
		fn_logecho "[ ok ] Directory ${libdir}/${deftransmission} found"
	else
		fn_logecho "[ERROR] could not find directory ${libdir}/${deftransmission}"
		fn_sorry_exit
	fi
	# Directory /etc/transmission-daemon
	if [ -d "${etcdir}/${deftransmission}" ]; then
		fn_logecho "[ ok ] Directory ${etcdir}/${deftransmission} found"
	else
		fn_logecho "[ERROR] could not find directory ${etcdir}/${deftransmission}"
		fn_sorry_exit
	fi
}

fn_stop_transmission(){
	# Stopping transmission
	# If process is started
	if [ -n "$(ps auxn | grep "${deftransmission} " | grep -v grep)" ]; then
		fn_logecho "Stopping default ${deftransmission}"
		"${tdefprocesspath}" stop
	fi
	# Instance
	if [ -f "${tuprocesspath}" ]; then
		fn_logecho "Stopping ${tuprocess}"
		"${tuprocesspath}" stop
	fi
}

fn_check_previously_installed(){
	if [ -f "${tuprocesspath}" ]; then
		fn_logecho "[ INFO ] ${tuprocess} was found!"
		fn_logecho "Autoclean the old transmission from ${username}?"
		while true; do
			read -e -p "Continue? [y/n]" yn
			case $yn in
				[Yy]* ) echo "Cleaning!"; cleanoldtransmission="yes"; break;;
				[Nn]* ) echo "Aborting!"; cleanoldtransmission="no", break;;
			* ) echo "Please answer yes or no.";;
			esac
		done
		if [ "${cleanoldtransmission}" == "yes" ]; then
			fn_logecho "Removing user ${username} from group ${tservice}..."
			deluser "${username}" "${tservice}"
			fn_logecho "[ ok ] User is not a part of ${tservice} anymore!"
			fn_logecho "Removing ${tuprocess} files..."
			rm -R "${bindir:?}/${tuprocess:?}" "${initdir:?}/${tuprocess:?}" "${libdir:?}/${tuprocess:?}" "${etcdir:?}/${tuprocess:?}" "${defdir:?}/${tuprocess:?}"
			fn_logecho "[ ok ] ${tuprocess} files removed!"
			fn_logecho "Removing ${tuprocess} from rc.d..."
			update-rc.d "${tuprocess}" remove
			fn_logecho "[ ok ] Process cleared from rc.d!"
			fn_logecho "[ ok ] Previous installation cleaned!"
		fi
	fi
}

# Check if user exists, returns userexists=0/1
fn_check_user_exists(){
	if [ "$(grep "${username}" /etc/passwd)" ]; then
		userexists="1"
	else
		userexists="0"
	fi
}

# Prompts for removing an existing user
fn_remove_user_exists(){
	fn_check_user_exists
	if [ "${userexists}" == "1" ]; then
		fn_logecho "Info! ${username} already exists"
		fn_logecho "Do you wish to entirely remove the user and its home directory?"
		fn_logecho "[WARNING] Any file in ${userdir} will be lost!"
		while true; do
			read -e -p "Continue? [y/n]" yn
			case $yn in
				[Yy]* ) echo "Let's go!"; cleanuser="yes"; break;;
				[Nn]* ) echo "Aborting!"; cleanuser="no", break;;
			* ) echo "Please answer yes or no.";;
			esac
		done
		if [ "${cleanuser}" == "yes" ]; then
			fn_logecho "Closing ${username} processes"
			killall -KILL -u "${username}"
			fn_logecho "[ ok ] Closed processes"
			fn_logecho "Removing user: ${username} and its transmission home: ${userdir}"
			userdel "${username}"
			fn_logecho "[ ok ] Removed previous ${username}"
			if [ -d "${userdir}" ]; then
				fn_logecho "Removing user home directory"
				rm -rf "${userdir:?}"
				fn_logecho "[ OK ] Removed ${userdir}"
			fi
			if [ -f "/etc/apache2/conf-enabled${apachealias}/${username}" ]; then
				fn_logecho "Removing apache2 alias: ${apachealias}/${username}"
				rm "/etc/apache2/conf-enabled${apachealias}/${username}"
				fn_logecho "Reloading apache2"
				service apache2 reload
			fi
		fi
	else
		fn_logecho "Info! Linux user: ${username} does not exist"	
	fi
}

fn_create_user(){
	fn_remove_user_exists
	fn_logecho "Home direcotry for this user set to dir: ${userdir}"
	fn_logecho "Create new transmission server for user: ${username}?"
	fn_prompt_continue_y
	# Adding user
	if [ ! -d ${sbdirectories} ]; then
		fn_logecho "Creating seedbox directory ${sbdirectories}..."
		mkdir -p "${sbdirectories}"
	else
		fn_logecho "[WARNING] Seedbox directory already exists: ${sbdirectories}"
	fi
	fn_logecho "Creating ${username}...."
	useradd -m -d "${userdir}" "${username}"
	fn_logecho "Default shell ${usershell} for ${username}"
	usermod -s "${usershell}" "${username}"
	# Doc http://askubuntu.com/questions/221081/permission-denied-when-downloading-with-transmission-deamon
	fn_logecho "Adding user ${username} to group ${tservice}..."
	fn_logecho "Info! It fixes permission issues but allows this user to access other files from the group and reciprocally"
	usermod -a -G "${tservice}" "${username}"
	fn_logecho "[ ok ] User created"
	fn_logecho "Applying password to user: ${username}:"
	echo -e "${userpassword}\n${userpassword}" | passwd "${username}"
}

fn_user_dirs(){
	fn_logecho "Creating user's directories..."
	sleep 1
	fn_logecho "${downloadsdir} && ${incompletedir}"
	if [ ! -d "${downloadsdir}" ]; then
		mkdir -p "${downloadsdir}"
	fi
	if [ ! -d "${incompletedir}" ]; then
		mkdir -p "${incompletedir}"
	fi
	fn_logecho "[ ok ] Directories created!"
	fn_logecho "Applying permissions..."
	sleep 1
	chown "${username}":"${tservice}" "${userdir}"
	chown -R "${username}":"${tservice}" "${downloadsdir}" "${incompletedir}"
	chmod 775 "${sbdirectories}"
	chmod -R ${chmodvalue} "${userdir}"
	fn_logecho "[ ok ] Proper permissions applied!"
}

### Dev notes
# https://fr.scribd.com/doc/242365178/How-to-Run-Multiple-Instances-of-Transmission-Daemon-in-Linux-Debian-or-Ubuntu
# cp /usr/bin/transmission-daemon /usr/bin/transmission-daemon2
# cp /etc/init.d/transmission-daemon /etc/init.d/transmission-daemon2
# cp -a /var/lib/transmission-daemon /var/lib/transmission-daemon2
# cp -a /etc/transmission-daemon /etc/transmission-daemon2

fn_transmission_duplicate(){
	fn_logecho "Duplicating ${deftransmission} to ${tuprocess}..."
	cp "${bindir}/${deftransmission}" "${bindir}/${tuprocess}"
	cp "${initdir}/${deftransmission}" "${initdir}/${tuprocess}"
	cp -a "${libdir}/${deftransmission}" "${libdir}/${tuprocess}"
	cp -a "${etcdir}/${deftransmission}" "${etcdir}/${tuprocess}"
	cp "${defdir}/${deftransmission}" "${defdir}/${tuprocess}"
	# A little check
	if [ ! -d "${etcdir}/${tuprocess}" ]; then
		fn_logecho "[ERROR] ${etcdir}/${tuprocess} was not created"
		fn_sorry_exit
	fi
	fn_logecho "[ ok ] ${tuprocess} duplicated!"
}

# Set config
fn_set_config(){
	fn_logecho "1/3 Please, set a listening IP: (leave empty for default 0.0.0.0)"
	read -r ip
	if [ -z "${ip}" ]; then
		ip="0.0.0.0"
	fi
	fn_logecho "IP set to: ${ip}"
	fn_logecho "2/3 Please, set an RPC port: (leave empty for default 9091)"
	read -r trpcport
	if [ -z "${trpcport}" ]; then
		trpcport="9091"
	fi
	fn_logecho "RPC port set to: ${trpcport}"
	while [ -z "${userpassword}" ]; do
		fn_logecho "3/3 Please, set the user password for RPC, SSH and FTP"
		fn_logecho "Warning! No confirmation"
		fn_logecho "${username} password:"
		read -rs userpassword
	done
}

fn_write_config(){
	# Check if config file exists, inform if it doesn't since it's not normal
	if [ ! -f "${tuconfig}" ]; then
		fn_logecho "Info! No config file was found in ${etcdir}/${tuprocess}"
		fn_logecho "Don't worry, this setup will build it from scratch anyways"
		touch "${tuconfig}"
	fi
	fn_logecho "Creating config file..."
	# Write to actual config file
	echo "{
	\"alt-speed-down\": 50,
	\"alt-speed-enabled\": false,
	\"alt-speed-time-begin\": 540,
	\"alt-speed-time-day\": 127,
	\"alt-speed-time-enabled\": false,
	\"alt-speed-time-end\": 1020,
	\"alt-speed-up\": 50,
	\"bind-address-ipv4\": \"${ip}\",
	\"bind-address-ipv6\": \"::\",
	\"blocklist-enabled\": false,
	\"blocklist-url\": \"http://www.example.com/blocklist\",
	\"cache-size-mb\": 4,
	\"dht-enabled\": true,
	\"download-dir\": \"${downloadsdir}\",
	\"download-limit\": 100,
	\"download-limit-enabled\": 0,
	\"download-queue-enabled\": true,
	\"download-queue-size\": 5,
	\"encryption\": 1,
	\"idle-seeding-limit\": 30,
	\"idle-seeding-limit-enabled\": false,
	\"incomplete-dir\": \"${incompletedir}\",
	\"incomplete-dir-enabled\": true,
	\"lpd-enabled\": false,
	\"max-peers-global\": 200,
	\"message-level\": 1,
	\"peer-congestion-algorithm\": \"\",
	\"peer-id-ttl-hours\": 6,
	\"peer-limit-global\": 200,
	\"peer-limit-per-torrent\": 50,
	\"peer-port\": 51413,
	\"peer-port-random-high\": 65535,
	\"peer-port-random-low\": 49152,
	\"peer-port-random-on-start\": true,
	\"peer-socket-tos\": \"default\",
	\"pex-enabled\": true,
	\"port-forwarding-enabled\": false,
	\"preallocation\": 1,
	\"prefetch-enabled\": 1,
	\"queue-stalled-enabled\": true,
	\"queue-stalled-minutes\": 30,
	\"ratio-limit\": 2,
	\"ratio-limit-enabled\": false,
	\"rename-partial-files\": true,
	\"rpc-authentication-required\": true,
	\"rpc-bind-address\": \"${ip}\",
	\"rpc-enabled\": true,
	\"rpc-password\": \"${userpassword}\",
	\"rpc-port\": ${trpcport},
	\"rpc-url\": \"/transmission/\",
	\"rpc-username\": \"${username}\",
	\"rpc-whitelist\": \"127.0.0.1\",
	\"rpc-whitelist-enabled\": false,
	\"scrape-paused-torrents-enabled\": true,
	\"script-torrent-done-enabled\": false,
	\"script-torrent-done-filename\": \"\",
	\"seed-queue-enabled\": false,
	\"seed-queue-size\": 10,
	\"speed-limit-down\": 12000,
	\"speed-limit-down-enabled\": false,
	\"speed-limit-up\": 500,
	\"speed-limit-up-enabled\": false,
	\"start-added-torrents\": true,
	\"trash-original-torrent-files\": false,
	\"umask\": ${umask},
	\"upload-limit\": 100,
	\"upload-limit-enabled\": 0,
	\"upload-slots-per-torrent\": 50,
	\"utp-enabled\": true
	}" > "${tuconfig}"

	echo "Symlinking config file"
	ln -vsf "${tuconfig}" "${utlibconfig}"
}


fn_config_extra(){
	fn_logecho "Adjusting ${initdir}/${tuprocess} to fit user..."
	# Replace default transmission process name ocurrences by user transmission process name
	sed -i "s/${deftransmission}/${tuprocess}/g" "${initdir}/${tuprocess}"
	fn_logecho "[ ok ] New process now fits user!"
	# Replace CONFIG_DIR="/var/lib/transmission-daemon/info" in File: /etc/default/transmission-daemon-downloader
	fn_logecho "Updating config location info"
	sed -i "s@${tdefcfgdir}@${ucfgdir}@g" "${udefdir}"
	fn_logecho "[ ok ] Config location info updated!"

	# Process upon system boot
	fn_logecho "Allowing ${tuprocess} to run on boot"
	update-rc.d "${tuprocess}" defaults
	fn_logecho "[ ok ] update-rc.d applied!"

	# Create .htaccess
	if [ ! -f "${downloadsdir}/.htaccess" ]; then
		fn_logecho "Creating .htaccess"
		touch "${downloadsdir}/.htaccess}"
		echo "# protect the htaccess file
		<files .htaccess>
		order allow,deny
		deny from all
		</files>" > "${downloadsdir}/.htaccess"
		fn_logecho "[ ok ] .htaccess created!"
	fi

	# Create apache2 alias
	if [ -d "/etc/apache2/conf-enabled" ]; then
		fn_logecho "Creating apache2 alias: ${apachealias}/${username}"
		touch "/etc/apache2/conf-enabled${apachealias}/${username}"
		echo "Alias /${username} \"${downloadsdir}\"" > "/etc/apache2/conf-enabled${apachealias}/${username}"
		fn_logecho "Reloading apache2"
		service apache2 reload
		aliascreated="yes"
	fi
}

fn_setup_complete(){
	fn_logecho "Transmission server Deployment"
	fn_logecho "########################################################"
	fn_logecho "Installation complete!"
	fn_logecho "You can now start the daemon with:"
	fn_logecho "./${selfname} start ${username}"
	fn_logecho "Info:"''''''''''
	fn_logecho "Username: ${username}"
	fn_logecho "Password: ${userpassword}"
	fn_logecho "IP: ${ip} or $(hostname)"
	if [ "${aliascreated}" == "yes" ]; then
		fn_logecho "Files Access: http://${ip}${apachealias}/${username} or http://$(hostname)${apachealias}/${username}"
	fi
	fn_logecho "RPC Port: ${trpcport}"
	fn_logecho "RPC URL: /transmission"
	fn_logecho ""
	fn_logecho "Credits: UltimateByte"
}

fn_remove_complete(){
	fn_logecho "Transmission server remove"
	fn_logecho "########################################################"
	fn_logecho "Removal complete!"
	fn_logecho "Credits: UltimateByte"
}

fn_details_process(){
	fn_logecho "########"
	fn_logecho "User: ${seedboxinfo}"
	fn_logecho "Bind Address IPV4: $(cat "${etcdir}/${deftransmission}-${seedboxinfo}/${cfgfile}" | grep bind-address-ipv4 | awk -F " " '{print $2}' | awk -F "," '{print $1}')"
	fn_logecho "RPC Bind Address: $(cat "${etcdir}/${deftransmission}-${seedboxinfo}/${cfgfile}" | grep rpc-bind-address | awk -F " " '{print $2}' | awk -F "," '{print $1}')"
	fn_logecho "RPC Port: $(cat "${etcdir}/${deftransmission}-${seedboxinfo}/${cfgfile}" | grep rpc-port | awk -F " " '{print $2}' | awk -F "," '{print $1}')"
	fn_logecho "Disk Usage: $(du -sh "${sbdirectories}/${seedboxinfo}" | awk -F " " '{print $1}')"
	fn_logecho "Downloads count: $(find "${sbdirectories}/${seedboxinfo}/downloads" -mindepth 1 -maxdepth 1 | wc -l)"
	fn_logecho "Incomplete count: $(find "${sbdirectories}/${seedboxinfo}/incomplete" -mindepth 1 -maxdepth 1 | wc -l)"
	fn_logecho "In Transmission: $(find "${libdir}/${deftransmission}-${seedboxinfo}/.config/${deftransmission}/resume" -mindepth 1 -maxdepth 1 | wc -l)"
}

fn_details(){
	echo "#################################"
	echo "######## Seedbox details ########"
	echo "#################################"
	if [ "${username}" == "all" ]; then
		find "${sbdirectories}" -mindepth 1 -maxdepth 1 -type d | while IFS= read -r file; do
			seedboxinfo="$(basename "${file}")"
			if [ -d "${etcdir}/${deftransmission}-${seedboxinfo}" ]; then
				fn_details_process
			fi
		done
	elif [ -d "${userdir}" ]; then
		seedboxinfo="${username}"
		fn_details_process
	else
		fn_logecho "[ERROR] Cannot find ${userdir}"
		exit
	fi
}

# Append a start/stop/restart command to a transmission instance
fn_append_command(){
	fn_logecho "Command: ${command} ${username} instance"
	"${tuprocesspath}" "${command}"
	fn_logecho "[OK] ${command} ${username}"
}

fn_control_instance(){
	if [ "${username}" == "all" ]; then
		find "${sbdirectories}" -mindepth 1 -maxdepth 1 -type d | while IFS= read -r file; do
			selectedseedbox="$(basename "${file}")"
			if [ -d "${etcdir}/${deftransmission}-${selectedseedbox}" ]; then
				fn_refresh_tuprocess
				fn_append_command
			fi
		done
	elif [ -f "${tuprocesspath}" ]; then
		fn_append_command
	else
		fn_logecho "[ERROR] Cannot find ${tuprocesspath}"
		exit
	fi
}

if [ "${command}" == "details" ]; then
	fn_details
elif [ "${command}" == "start" ]||[ "${command}" == "stop" ]||[ "${command}" == "restart" ]; then
	fn_control_instance
elif [ "${command}" == "deploy" ]; then
	fn_check
	fn_welcome
	fn_prompt_continue_y
	fn_stop_transmission
	fn_check_previously_installed
	fn_set_config
	fn_create_user
	fn_user_dirs
	fn_transmission_duplicate
	fn_write_config
	fn_config_extra
	fn_setup_complete
elif [ "${command}" == "remove" ]; then
	fn_check
	fn_welcome
	fn_stop_transmission
	fn_check_previously_installed
	fn_remove_user_exists
	fn_remove_complete
fi
